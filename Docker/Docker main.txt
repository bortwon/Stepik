**Docker** — технология для создания и управления контейнерами.

Мы оборачиваем какой то код или приложение в контейнеры для того, чтобы он нам гарантировал одинаковое поведение в
разных окружениях. Мы можем просто брать докер контейнеры и запускать их где угодно, где есть докер. Нам не важно, что
это будет за ОС, его версия. Все поведение будет зафиксировано в контейнере.


docker pull node - загрузка образа node

docker ps --help - узнаю что значит команда ps

docker run -it node - запускает ноду (в ней могу писать код)

.exit - выхожу из ноды обратно на локальный пк

docker rm -ID - удаляет контейнеры с соответстующими ID

docker container prune - удаляет все контейнеры


СОЗДАНИЕ IMAGE

FROM node - базируем на основе node, создавем образ
WORKDIR /app - где лежат наши папки, рабочая дирректория
COPY . . - откуда копируем файлы куда (. указывает на корневую дирректорию)
RUN npm install - запускается когда строим образ
EXPOSE 3000 - какой порт запускает приложение
CMD ["node", "app.js"] - массив из команд. Команда запускается когда мы запускаем



docker build . - создание образа в текущей дирректории


docker stop ID - останавливает запущенный контейнер

docker start ID - Запускаем контейнер


docker run -d -p 3000:3000 ID -   -p - порт, первый порт - это какой порт использовать на локальной машине, второй - какой
порт и докер контйнера хотим локально использовать, -d - не погружает нас в консоль

80 порт по умолчанию для http


docker image ls - список имэйджей

docker run -d -p 3000:3000 ID


Если в код внесли изменения, то нужно остановить прошлый процесс, забилдить новый имэйдж (docker build) и создать новый
контейнер (docker run -d -p 3000:3000 ID)

Контейнер можно тормозить по имени

У докера есть кэширование, чтобы не делать лишнюю работу:
измененный код

FROM node

WORKDIR /app

COPY package.json /app - берем модули из кэша

RUN npm install

COPY . .

EXPOSE 3000

CMD ['node', 'app.js']



docker build - видим, что взято из кэша



ПОЛЕЗНЫЕ КОМАНДЫ:

docker run -d -p 3000:3000 ID - запуск процесса, но если надо подключитсья к контйнеру в консоле:
docker attach ID - находимся внутри процесса

что происходило в контйнере: docker logs ID


При старте контейнера:
docker run -d -p 3000:3000 --name random_name ID - задавать имя можно

docker stop random_name - останавливает с именем, которое мы создали


Хотит создать новый контейнер docker run -d -p 3000:3000 --name random_name --rm ID - --rm значит, что при остановке
контейнера он сам автоматически удалится


Чтобы подчистить Images нужно написать: docker rmi IDImage IDImage IDImage IDImage

все неиспользуемые удаляются docker image prune


docker build -t random_name . - создание имэйджа с именем
Теперь можно запустить контейнер: docker run -d -p 3000:3000 --rm random_name(вместо IDImage)


Создание версий для имэйджей:
docker build -t random_name:exc . - (tag изменился)
docker run -d -p 3000:3000 --rm --name random_name random_name:exc - запуск именно этой версии


